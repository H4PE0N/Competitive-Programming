{
  "allocate_array_integer":
  {
    "description": "If you want to allocate an integer to your  array,  you\ncan use an index with this function. The  integer  will\nbe stored at the index slot in the integer array.",
    "parameters": ["int* integer", "int index", "int integer"],
    "returning": "int* array"
  },
  "generate_integer_array":
  {
    "description": "When you want to have an integer array, you  will  have\nto think of want length it should be. Then you  put  it\nin this function, and you get the array in return.",
    "parameters": ["int length"],
    "returning": "int* array"
  },
  "integer_array_length":
  {
    "description": "This function  calculates  the  length  of  an  integer\narray. It does that with help of the \\0 characters. The\nfirst \\0 character decides the length.",
    "parameters": ["int* array"],
    "returning": "int length"
  },
  "array_contains_integer":
  {
    "description": "If you want to check if your array contains a  specific\ninteger, you can use this function. The function  loops\nthrough the array and checks for the integer.",
    "parameters": ["int* array", "int length", "int integer"],
    "returning": "int boolean"
  },
  "delete_array_integer":
  {
    "description": "To delete an  integer  from  an  array,  you  move  the\ninteger to the end and then replace its place with  the\nintegers to the right. At last you delete the integer.",
    "parameters": ["int* array", "int length", "int index"],
    "returning": "int* array"
  },
  "add_array_integer":
  {
    "description": "When you want to add an integer to your array, you  can\ndo that without having to know an index. This  function\nadds the inputted integer to the end of the array.",
    "parameters": ["int* array", "int length", "int integer"],
    "returning": "int* array"
  },
  "sort_integer_array":
  {
    "description": "To sort the inputted array, the  function  uses  bubble\nsort. With  help  of  the  length  of  the  array,  the\nfunction can sort relatively fast.",
    "parameters": ["int* array", "int length"],
    "returning": "int* array"
  },
  "remove_array_integer":
  {
    "description": "This function removes the  inputted  integer  from  the\narray. The function calls  the  delete  function  after\ncalculating the index of the integer.",
    "parameters": ["int* array", "int length", "int integer"],
    "returning": "int* array"
  },
  "compare_integer_arrays":
  {
    "description": "To compare the inputted arrays  with  the  same  length\nthat  comes  in  as  parameters,  this  function  loops\nthrough and compares every integer after each other.",
    "parameters": ["int* first", "int* second", "int length"],
    "returning": "int boolean"
  },
  "remove_array_integers":
  {
    "description": "When you want to delete every  integer  of  a  specific\nvalue, you can use  this  function.  It  loops  through\nuntil the integer value is no longer in the array.",
    "parameters": ["int* array", "int length", "int integer"],
    "returning": "int* array"
  },
  "array_integer_amount":
  {
    "description": "When you want to count the amount of an integer  inside\nan array, you can use this function. The amount can  be\nuseful to know when you want to know the frequency.",
    "parameters": ["int* array", "int length", "int integer"],
    "returning": "int amount"
  },
  "integers_range_between":
  {
    "description": "If you're going to check if an array range between some\nintegers, you  will  loop  through  and  check  if  the\nintegers range between the minimum and maximum values.",
    "parameters": ["int* array", "int minimum", "int maximum"],
    "returning": "int boolean"
  },
  "generate_random_array":
  {
    "description": "To generate a random array, you will use this function.\nWith the help of a minimum and a  maximum  integer,  it\ngenerates an array with length random integers.",
    "parameters": ["int length", "int minimum", "int maximum"],
    "returning": "int* array"
  },
  "reverse_integer_array":
  {
    "description": "To reverse the order of an  integer  array,  you  could\ngenerate a new array and allocate the integers from the\ninputted array in the backwards order.",
    "parameters": ["int* array", "int length"],
    "returning": "int* reverse"
  },
  "add_array_integers":
  {
    "description": "If you want to add more than one of the same integer to\nan array, a loop would be the way to go. This  function\nadds the integer to the array amount times.",
    "parameters": ["int* array", "int length", "int integer", "int amount"],
    "returning": "int* array"
  },
  "integer_array_stdout":
  {
    "description": "This function prints out an array to the  console  with\nstandard output. This  function  is  used  to  see  the\ncontent of the inputted array, not to be pretty.",
    "parameters": ["int* array", "int length"],
    "returning": "void"
  },
  "compare_array_content":
  {
    "description": "To compare two integer arrays without caring about  the\norder of the integers, you can use  this  function.  It\nsorts the arrays and then compare them.",
    "parameters": ["int* first", "int* second", "int length"],
    "returning": "int boolean"
  },
  "duplicate_integer_array":
  {
    "description": "If you want to  have  two  copies  of  the  same  array\nwithout messing with the  memory  allocation,  you  can\nduplicate your array with this.",
    "parameters": ["int* array", "int length"],
    "returning": "int* doublet"
  },
  "array_index_integer":
  {
    "description": "To get the integer that is in the  index  slot  of  the\narray, you can use this function to don't  confuse  any\nprogrammer that don't program in C.",
    "parameters": ["int* array", "int index"],
    "returning": "int integer"
  },
  "shuffle_integer_array":
  {
    "description": "This function shuffles the integer array  pretty  well.\nIf you aren't happy of the results I recommend  calling\nthe function again, until it is random.",
    "parameters": ["int* array", "int length"],
    "returning": "int* array"
  },
  "generate_integer_pair":
  {
    "description": "The datatype pair is an  integer  array  with  only  two\nintegers, therefor the name pair. This can  be  used  to\nstore two integers that works together.",
    "parameters": ["int first", "int second"],
    "returning": "int* pair"
  },
  "integer_array_total":
  {
    "description": "This function calculates the total  value  of  all  the\nintegers in the array added to each other. So  you  get\nthe sum of the arrays integers.",
    "parameters": ["int* array", "int length"],
    "returning": "int total"
  },
  "integer_array_section":
  {
    "description": "To get a section from an integer array, you  will  have\nto use two indexes. It is like  cutting  a  cake.  This\nfunction will return a section from an array.",
    "parameters": ["int* array", "int first", "int second"],
    "returning": "int* section"
  },
  "array_integer_index":
  {
    "description": "You put in an array and an integer,  and  the  function\nwill return the greatest index of the integer if  there\nare more than one. If not, it returns the only index.",
    "parameters": ["int* array", "int length", "int integer"],
    "returning": "int index"
  },
  "integers_inside_array":
  {
    "description": "If you have a set of integers, and you want to know  if\nthey are part of an array. You can call this  function.\nIt checks if the integers fit inside the array.",
    "parameters": ["int* array", "int length", "int* integers"],
    "returning": "int boolean"
  },
  "generate_integer_matrix":
  {
    "description": "The function generates an empty matrix with the  height\nand width that you put in as arguments. Every  slot  in\nthe matrix will be allocated with the \\0 character.",
    "parameters": ["int height", "int width"],
    "returning": "int** matrix"
  },
  "allocate_matrix_integer":
  {
    "description": "To allocate an integer inside the matrix  you  can  use\nthis  function.  It  is  like  a  backwards  coordinate\nsystem, but with height and width. ",
    "parameters": ["int** matrix", "int height", "int width", "int integer"],
    "returning": "int** matrix"
  },
  "delete_matrix_integer":
  {
    "description": "When you want to delete an integer from a  matrix,  you\ncan use a height and a width to  inform  which  integer\nyou want to delete. It is like backward coordinates.",
    "parameters": ["int** matrix", "int height", "int width"],
    "returning": "int** matrix"
  },
  "integer_matrix_height":
  {
    "description": "To calculate the height of the inputted  matrix  array,\nyou will have to use the total width of the  matrix  to\ncheck if the arrays are full or not.",
    "parameters": ["int** matrix", "int width"],
    "returning": "int height"
  },
  "matrix_contains_integer":
  {
    "description": "You can use this to check  if  a  specific  integer  is\nsomewhere in your integer matrix. The function  returns\ntrue if the inputted matrix contains the integer.",
    "parameters": ["int** matrix", "int height", "int width", "int integer"],
    "returning": "int boolean"
  },
  "matrix_array_contains":
  {
    "description": "To check if a specific array  of  the  inputted  matrix\ncontains the integer, you can  use  this  function.  It\nchecks only one array for an integer.",
    "parameters": ["int** matrix", "int index", "int integer"],
    "returning": "int boolean"
  },
  "remove_matrix_integer":
  {
    "description": "This function removes the last of the inputted  integer\nthat was added to the matrix. So you don't have to  say\nwhich height and width the integer is at.",
    "parameters": ["int** matrix", "int height", "int integer"],
    "returning": "int** matrix"
  },
  "add_matrix_integer":
  {
    "description": "When you allocate an integer to a matrix  you  have  to\ngive the function height and width, here  the  function\nadds the integer to the end of the matrix.",
    "parameters": ["int** matrix", "int height", "int integer"],
    "returning": "int** matrix"
  },
  "remove_matrix_array":
  {
    "description": "This function removes the last of the integer array  in\nthe matrix. Unlike the delete function, you don't  need\nto give the function a height and a width.",
    "parameters": ["int** matrix", "int height", "int* array"],
    "returning": "int** matrix"
  },
  "add_matrix_array":
  {
    "description": "This function lets you add  an  integer  array  to  the\nmatrix, without having to give it a height or a  width.\nThe array will be stored at the end of the matrix.",
    "parameters": ["int** matrix", "int height", "int* array"],
    "returning": "int** matrix"
  },
  "generate_random_matrix":
  {
    "description": "To generate a  matrix  with  random  generated  integer\narrays, you can use this function. The integers will be\nbetween minimum and maximum.",
    "parameters": ["int height", "int width", "int minimum", "int maximum"],
    "returning": "int** matrix"
  },
  "integer_matrix_stdout":
  {
    "description": "This function prints out the inputted matrix  array  in\nthe console. Just like the other stdout  functions,  it\nis not meant to look beautiful.",
    "parameters": ["int** matrix", "int height", "int width"],
    "returning": "void"
  },
  "shuffle_matrix_arrays":
  {
    "description": "In this function, every array in  the  inputted  matrix\nwill be shuffled using the array shuffle function,  you\ncan always shuffle again if you want it better.",
    "parameters": ["int** matrix", "int height"],
    "returning": "int** matrix"
  },
  "duplicate_integer_matrix":
  {
    "description": "If you want to of the same  matrix  without  having  to\ndeal with  memory  problems,  you  can  duplicate  your\nmatrix with this function.",
    "parameters": ["int** matrix", "int height", "int widdth"],
    "returning": "int** doublet"
  },
  "remove_matrix_integers":
  {
    "description": "This function uses the  remove_array_integers  function\nto remove  every  integer  that  matches  the  inputted\ninteger in the matrix array.",
    "parameters": ["int** matrix", "int height", "int integer"],
    "returning": "int** matrix"
  },
  "matrix_array_index":
  {
    "description": "If you want the  index  of  a  integer  array  in  your\nmatrix, you can use this function.  It  calculates  the\nindex of an array in an inputted matrix.",
    "parameters": ["int** matrix", "int height", "int* array"],
    "returning": "int index"
  },
  "sort_matrix_arrays":
  {
    "description": "When you put in a matrix  in  this  function,  it  will\nreturn  with  all  of  it's  arrays  sorted  using  the\nsort_integer_array function on every array.",
    "parameters": ["int** matrix", "int height"],
    "returning": "int** matrix"
  },
  "matrix_index_array":
  {
    "description": "This function returns the array that  is  in  the  slot\nindex inside the inputted matrix  array.  You  get  the\ncorresponding array for the specific index.",
    "parameters": ["int** matrix", "int index"],
    "returning": "int* array"
  },
  "compare_matrix_content":
  {
    "description": "If you want to  compare  two  matrices  without  caring\nabout the order of them, you can use this function.  It\ncompares matrices after sorting them.",
    "parameters": ["int** first", "int** second", "int height", "int width"],
    "returning": "int boolean"
  },
  "matrix_array_length":
  {
    "description": "If you want to calculate  the  length  of  one  of  the\narrays in a matrix, you  can  call  this  function.  It\nreturns the length of a index specific array.",
    "parameters": ["int** matrix", "int index"],
    "returning": "int length"
  },
  "compare_integer_matrix":
  {
    "description": "This function compares two matrices  using  the  height\nand width of the inputted matrices. They  must  be  the\n same dimensions to not mess up the program",
    "parameters": ["int** first", "int** second", "int height", "int width"],
    "returning": "int boolean"
  },
  "allocate_matrix_array":
  {
    "description": "When you want to allocate  a  matrix  array  with  this\nfunction, it works the same way as allocate  a  integer\nin an array. With help of an index.",
    "parameters": ["int** matrix", "int index", "int* array"],
    "returning": "int** matrix"
  },
  "delete_matrix_array":
  {
    "description": "This function deletes an array from the inputted matrix\nusing an index. It moves the array to the end and erase\nit from memory, by making it empty",
    "parameters": ["int** matrix", "int height", "int index"],
    "returning": "int** matrix"
  },
  "matrix_array_total":
  {
    "description": "The function lets you calculate the total value of  all\nof the integers in one of the matrix arrays,  using  an\nindex to determine the array.",
    "parameters": ["int** matrix", "int index"],
    "returning": "int total"
  },
  "shuffle_integer_matrix":
  {
    "description": "If you want to shuffle around the arrays in  a  matrix,\nyou can call this function. It moves around the  arrays\n from the inputted matrix randomly.",
    "parameters": ["int** matrix", "int height"],
    "returning": "int** matrix"
  },
  "reverse_integer_matrix":
  {
    "description": "This function generates  a  new  matrix  and  adds  the\narrays from the inputted matrix in backwards order. The\nreversed matrix becomes mirrored.",
    "parameters": ["int** matrix", "int height", "int width"],
    "returning": "int** reverse"
  },
  "reverse_matrix_arrays":
  {
    "description": "The function loops through the inputted matrix and uses\nthe reverse_integer_array function to mirror the  order\nof the integers in every array.",
    "parameters": ["int** matrix", "int height"],
    "returning": "int** reverse"
  },
  "sort_integer_matrix":
  {
    "description": "This function sorts the inputted  matrix  by  comparing\nthe arrays integers. The function does not compare  the\narrays by the total integer values.",
    "parameters": ["int** matrix", "int height"],
    "returning": "int** matrix"
  },
  "matrix_array_integer":
  {
    "description": "This  function  returns  the  integer  of  a   specific\ncoordinate. By inputting the height and width that  you\nwant to access, you get the integer.",
    "parameters": ["int** matrix", "int height", "int width"],
    "returning": "int integer"
  },
  "hashmap_keyword_exists":
  {
    "description": "This function loops through the  hashmap  and  compares\nthe current keyword to the inputted keyword, it  checks\nif the keyword exists in the hashmap.",
    "parameters": ["int** hashmpa", "int keyword"],
    "returning": "int boolean"
  },
  "integer_hashmap_length":
  {
    "description": "To calculate the length of your hashmap,  you  can  use\nthis function. It checks if the current slot is  empty,\nboth the keyword and value are null.",
    "parameters": ["int** hashmap"],
    "returning": "int length"
  },
  "hashmap_keyword_index":
  {
    "description": "This function returns the index of a keyword. It  loops\nthrough the inputted hashmap and compares the keywords,\nreturns the index if it matches.",
    "parameters": ["int** hashmap", "int keyword"],
    "returning": "int index"
  },
  "increase_hashmap_value":
  {
    "description": "If you want to increase the value of a keyword  in  the\nhashmap, you could use this function.  If  the  keyword\ndoes not exists, it will create it.",
    "parameters": ["int** hashmap", "int keyword"],
    "returning": "int** hashmap"
  },
  "allocate_keyword_value":
  {
    "description": "This function let you allocate a value to a keyword  in\nthe  inputted  hashmap.  By  converting  the   inputted\nkeyword to an index, it allocates the value.",
    "parameters": ["int** hashmap", "int keyword", "int value"],
    "returning": "int** hashmap"
  },
  "convert_array_hashmap":
  {
    "description": "When you have an array of integers and want to  convert\nit to a hashmap, to see the amount of all the integers,\nyou can use this function.",
    "parameters": ["int* array", "int length"],
    "returning": "int** hashmap"
  },
  "convert_hashmap_array":
  {
    "description": "This function generates an array with the length of the\nhashmap total value. Then it fills the array  with  the\nintegers from the inputted hashmap.",
    "parameters": ["int** hashmap", "int length"],
    "returning": "int* array"
  },
  "allocate_hashmap_keyword":
  {
    "description": "This function  lets  you  allocate  a  keyword  to  the\ninputted matrix by using an index. You say which  index\nyou want to store the keyword, and it does that.",
    "parameters": ["int** hashmap", "int index", "int keyword"],
    "returning": "int** hashmap"
  },
  "integer_hashmap_keywords":
  {
    "description": "Sometimes it can be useful to  have the  keywords  with\nthe same value. This function returns an array with all\nthe keywords that have a specific value.",
    "parameters": ["int** hashmap", "int value"],
    "returning": "int* keywords"
  },
  "delete_hashmap_keyword":
  {
    "description": "When you want to get rid of a slot in your hashmap, you\ncan call this function. It removes both the keyword and\nvalue from the hashmap with an index.",
    "parameters": ["int** hashmap", "int length", "int index"],
    "returning": "int** hashmap"
  },
  "integer_hashmap_stdout":
  {
    "description": "When you want to take a look at your  integer  hashmap,\nyou can use this function. It loops through the hashmap\nand prints out the keyword before the value.",
    "parameters": ["int** hashmap", "int length"],
    "returning": "void"
  },
  "generate_random_hashmap":
  {
    "description": "This function generates an array of integers  with  the\ninputted length, that it then converts  to  a  hashmap.\nThe integers are between minimum and maximum.",
    "parameters": ["int length", "int minimum", "int maximum"],
    "returning": "int** hashmap"
  },
  "hashmap_index_value":
  {
    "description": "If you want the value in a hashmap by using  an  index,\nyou can call this function with your  hashmap  and  the\nindex you want the value from.",
    "parameters": ["int** hashmap", "int index"],
    "returning": "int value"
  },
  "hashmap_index_keyword":
  {
    "description": "If you want the keyword in a hashmap by using an index,\nyou can call this function with your  hashmap  and  the\nindex you want the keyword from.",
    "parameters": ["int** hashmap", "int index"],
    "returning": "int keyword"
  },
  "integer_hashmap_total":
  {
    "description": "This function calculates the total value of  a  hashmap\nby adding up the values from  the  hashmap.  The  total\nvalue of the hashmap, says how many items there are.",
    "parameters": ["int** hashmap", "int length"],
    "returning": "int total"
  },
  "hashmap_keyword_array":
  {
    "description": "You can  use  this  function  to  collect  all  of  the\nkeywords in a hashmap. It loops through the  collection\nand adds the keyword to an array, by using the index.",
    "parameters": ["int** hashmap", "int length"],
    "returning": "int* array"
  },
  "compare_integer_hashmaps":
  {
    "description": "If you want to compare two integer hash-maps with  each\nother,  you  can  use  this  function.  It  works  like\ncomparing two matrices, comparing all the inner arrays.",
    "parameters": ["int** first", "int** second", "int length"],
    "returning": "int boolean"
  },
  "sort_integer_hashmap":
  {
    "description": "This function sorts the inputted hashmap  by  comparing\nthe keywords. The smallest keyword will be at the start\nand the greatest at the end of the hashmap.",
    "parameters": ["int** hashmap", "int length"],
    "returning": "int** hashmap"
  },
  "compare_hashmap_content":
  {
    "description": "When you want to compare two  hashmaps,  and  does  not\ncare about if the order of one  hashmap  is  incorrect.\nYou can use this function to compare two hashmaps.",
    "parameters": ["int** first", "int** second", "int length"],
    "returning": "int boolean"
  },
  "generate_integer_hashmap":
  {
    "description": "A hashmap is generated by  creating  a  matrix  with  a\nspecific length as the height  and  two  slots  as  the\nwidth. You can do that with this function. ",
    "parameters": ["int length"],
    "returning": "int** hashmap"
  },
  "hashmap_keyword_value":
  {
    "description": "When you want to know the value of a  specific  keyword\nin your hashmap, you can get the value by inputting the\nkeyword and your hashmap in this function.",
    "parameters": ["int** hashmap", "int keyword"],
    "returning": "int value"
  },
  "duplicate_integer_hashmap":
  {
    "description": "If you want to have two hashmaps with the same content,\nyou can duplicate one here.  By  duplicating  you  wont\nhave a problem about where in memory it is stored.",
    "parameters": ["int** hashmap", "int length"],
    "returning": "int** doublet"
  },
  "remove_hashmap_keyword":
  {
    "description": "To remove a hashmap keyword you will have to input  the\nkeyword  you  want  to  remove.   Then   the   function\ncalculates the index, and deletes the index slot.",
    "parameters": ["int** hashmap", "int length", "int keyword"],
    "returning": "int** hashmap"
  },
  "allocate_hashmap_value":
  {
    "description": "When you want to allocate a value to a specific slot in\nyour hashmap, you can do that with this  function.  You\nchoose which index you want the value to be in.",
    "parameters": ["int** hashmap", "int index", "int value"],
    "returning": "int** hashmap"
  },
  "increase_index_value":
  {
    "description": "This function lets you increase a value in you  hashmap\nby one. Choose which value in the hashmap you  want  to\nincrease by inputting the corresponding index.",
    "parameters": ["int** hashmap", "int index"],
    "returning": "int** hashmap"
  },
  "reduce_index_value":
  {
    "description": "This function reduces the value in a hashmap  given  an\nindex. If the  value  is  one  or  less,  the  function\nremoves the slot completely from the inputted hashmap.",
    "parameters": ["int** hashmap", "int length", "int index"],
    "returning": "int** hashmap"
  },
  "generate_character_string":
  {
    "description": "With the help of this function,  you  can  generate  an\nempty string. By inputting the length as an argument to\nthe function, the string will have that length.",
    "parameters": ["int length"],
    "returning": "char* string"
  },
  "character_string_length":
  {
    "description": "To calculate the length of your character  string,  you\ncan use this function. It loops through until it  finds\nthe \\0 character. Then it stops and returns the index.",
    "parameters": ["char* string"],
    "returning": "int length"
  },
  "string_contains_character":
  {
    "description": "This function lets you check if your  character  string\ncontains a specific  character.  The  function  returns\ntrue if the character exists and false if it don't.",
    "parameters": ["char* string", "int length", "char character"],
    "returning": "int boolean"
  },
  "allocate_string_character":
  {
    "description": "With the help of an index, you can allocate a character\nin your string using this function. The character  will\nbe stored in the string under the inputted index.",
    "parameters": ["char* string", "int index", "char character"],
    "returning": "char* string"
  },
  "remove_string_character":
  {
    "description": "When you don't want a character in your string  anymore\nyou can remove it with this function. It calculates the\nindex of the character, then deletes it.",
    "parameters": ["char* string", "int length", "char character"],
    "returning": "char* string"
  },
  "add_string_character":
  {
    "description": "To add a character to your string,  you  can  use  this\nfunction. By inputting the length of  the  string,  the\nfunction allocates the character to the end.",
    "parameters": ["char* string", "int length", "char character"],
    "returning": "char* string"
  },
  "lower_alphabet_character":
  {
    "description": "The alphabet has 26 letters.  By  inputting  a  integer\nbetween 1 and 26, the function uses the integer  as  an\nindex to the lower alphabet and returns the character.",
    "parameters": ["int index"],
    "returning": "char character"
  },
  "add_string_characters":
  {
    "description": "This function adds multiple of the same  character.  By\ninputting the  integer  you  want  and  the  amount  of\nintegers, this function adds them to your string.",
    "parameters": ["char* string", "int length", "char character", "int amount"],
    "returning": "char* string"
  },
  "character_variable_greater":
  {
    "description": "To know if one character is greater than  another,  you\ncan use this function to determine. The first parameter\nis the one that is going to be tested at the other.",
    "parameters": ["char first", "char second"],
    "returning": "int boolean"
  },
  "generate_random_character":
  {
    "description": "This  function  generates   a   random   character   by\nconverting the random generated integer  to  an  index.\nThe index is then translated to the ascii table.",
    "parameters": ["int minimum", "int maximum"],
    "returning": "char character"
  },
  "character_range_between":
  {
    "description": "Same as with the integer, this function checks  if  the\nascii index of the character is between a minimum and a\nmaximum integer. If it is, the function returns true.",
    "parameters": ["char character", "int minimum", "int maximum"],
    "returning": "int boolean"
  },
  "remove_string_characters":
  {
    "description": "When you call this function  with  your  string  and  a\ninteger. The string will  not  have  any  integer  that\nmatches the integer you first put in.",
    "parameters": ["char* string", "int length", "char character"],
    "returning": "char* string"
  },
  "generate_random_string":
  {
    "description": "With the help of a function  that  generates  a  random\ncharacter, this function can  generate  a  string  with\nthose characters in it. The string length is chosen.",
    "parameters": ["int length", "int minimum", "int maximum"],
    "returning": "char* string"
  },
  "character_string_stdout":
  {
    "description": "To print out a string in the console you can use a  for\nloop with a print statement in it. That  is  what  this\nfunction is made of. A loop that prints the characters.",
    "parameters": ["char* string", "int length"],
    "returning": "void"
  },
  "shuffle_character_string":
  {
    "description": "To shuffle a string, you can switch two of the  indexes\nrandomly, and continue on the  whole  string.  That  is\nwhat this function does, shuffles an inputted string.",
    "parameters": ["char* string", "int length"],
    "returning": "char* string"
  },
  "duplicate_character_string":
  {
    "description": "When you want to have two of the same string,  you  can\ncall this function with the string and its length.  The\ndoublet will be returned same as the first string.",
    "parameters": ["char* string", "int length"],
    "returning": "char* doublet"
  },
  "character_string_section":
  {
    "description": "If you want a piece of  a  string,  you  will  have  to\nfigure out which indexes the section will  be  between.\nThen you can call this function to get the section.",
    "parameters": ["char* string", "int first", "int second"],
    "returning": "char* section"
  },
  "sort_character_string":
  {
    "description": "By comparing two characters that is adjacent  over  and\nover again, you can sort a  string  with  bubble  sort.\nThis function sorts an inputted string with the length.",
    "parameters": ["char* string", "int length"],
    "returning": "char* string"
  },
  "compare_string_content":
  {
    "description": "When you want  to  compare  two  strings  against  each\nother, but don't care about the order of them. You  can\nuse this function to compare the strings content.",
    "parameters": ["char* first", "char* second", "int length"],
    "returning": "int boolean"
  },
  "string_index_character":
  {
    "description": "You can get the character in a string by using an index\nin this function. When you put in your character string\nand an index, the function will return a character.",
    "parameters": ["char* string", "int index"],
    "returning": "char character"
  },
  "character_variable_smaller":
  {
    "description": "To check if one character is smaller than another,  you\ncan use this  function.  The  first  character  in  the\nparameters is the one that is going to be checked.",
    "parameters": ["char first", "char second"],
    "returning": "int boolean"
  },
  "generate_higher_alphabet":
  {
    "description": "This function will  generate  the  alphabet  in  higher\ncharacters. You get to choose how many of the  alphabet\ncharacters there will be generated in the string.",
    "parameters": ["int characters"],
    "returning": "char* alphabet"
  },
  "higher_alphabet_character":
  {
    "description": "The higher alphabet has only characters in upper  case.\nBy calling this function with an index from  1  to  26,\nyou get the alphabet character with that index.",
    "parameters": ["int index"],
    "returning": "char character"
  },
  "compare_character_strings":
  {
    "description": "To compare two strings with each  other  you  will  use\nthis function, it checks if all the characters are  the\nsame and in the right order in the character strings.",
    "parameters": ["char* first", "char* second", "int length"],
    "returning": "int boolean"
  },
  "generate_lower_alphabet":
  {
    "description": "This  function  generates  a  string   with   all   the\ncharacters from the lower alphabet. You  can  determine\nhow many of the lower case characters there will be.",
    "parameters": ["int characters"],
    "returning": "char* alphabet"
  },
  "compare_character_variables":
  {
    "description": "To compare character variables, you can  just  use  the\nnormal double-equal character, but the  function  needs\nto have character datatypes.",
    "parameters": ["char first", "char second"],
    "returning": "int boolean"
  },
  "delete_string_character":
  {
    "description": "If you want to delete a character in your  string,  you\ncan use an index with this function. By inputting which\nindex you want to delete, the slot will be deleted.",
    "parameters": ["char* string", "int length", "int index"],
    "returning": "char* string"
  },
  "reverse_character_string":
  {
    "description": "The returning string  of  this  function  will  be  the\nmirrored version of the inputted string.  The  function\nreverses the order of the strings characters.",
    "parameters": ["char* string", "int length"],
    "returning": "char* reverse"
  },
  "string_character_index":
  {
    "description": "You can get  the  index  of  the  last  character  that\nmatches the inputted character with this  function.  It\nreturns the index of the character inside the string.",
    "parameters": ["char* string", "int length", "char character"],
    "returning": "int index"
  },
  "characters_inside_string":
  {
    "description": "This function will check if a series of characters  are\na part  of  the  inputted  string.  It  checks  if  the\n inputted characters are inside the string and in order.",
    "parameters": ["char* string", "int length", "char* characters"],
    "returning": "int boolean"
  },
  "convert_integer_binary":
  {
    "description": "If you want to see what an integer would look  like  if\nit was written in binary code, you can convert it using\nthis function. A binary string will be returned.",
    "parameters": ["int integer"],
    "returning": "char* binary"
  },
  "convert_character_binary":
  {
    "description": "You can convert an integer to a binary string, you  can\nequally  easy  convert  a  character  to  binary.  This\nfunction gives you a binary value from a character.",
    "parameters": ["char character"],
    "returning": "char* binary"
  },
  "convert_array_binary":
  {
    "description": "With the help of a function that converts  integers  to\nbinary, you can convert  an  integer  array  to  binary\nstrings. It loops through and converts the integers.",
    "parameters": ["int* array", "int length"],
    "returning": "char** binary"
  },
  "convert_binary_array":
  {
    "description": "If you have some binary strings  in  a  list,  you  can\nconvert them to an integer array with this function. It\nconverts the binary strings and adds them to an array.",
    "parameters": ["char** binary", "int length"],
    "returning": "int* array"
  },
  "convert_binary_integer":
  {
    "description": "This function converts a binary string to  an  integer.\nThis can be useful in many cases, like in  cryptography\nand other things related to binary values.",
    "parameters": ["char* binary"],
    "returning": "int integer"
  },
  "convert_binary_character":
  {
    "description": "When you have a binary string and  want  to  see  which\ncharacter it corresponds to in the ascii table, you can\nuse this function to do the conversion for you.",
    "parameters": ["char* binary"],
    "returning": "char character"
  },
  "generate_random_binary":
  {
    "description": "Just like generating a normal integer or  a  character,\nthis function generates  a  random  binary  string.  It\ngenerates an integer, then converts it to binary.",
    "parameters": ["int minimum", "int maximum"],
    "returning": "char* binary"
  },
  "convert_string_binary":
  {
    "description": "This function  will  convert  every  character  in  the\ninputted string to binary strings, then store them in a\nlist. That means it will return a sentence of binary.",
    "parameters": ["char* string", "int length"],
    "returning": "char** binary"
  },
  "convert_binary_string":
  {
    "description": "If you have a list of binary string, and  you  want  to\nconvert them to a character string.  You  can  do  that\nwith help of this function, it returns a normal string.",
    "parameters": ["char** binary", "int length"],
    "returning": "char* string"
  },
  "integer_array_average":
  {
    "description": "To calculate the average value of an integer array, you\ncan add up the integers and divide by the length.  That\nis what this function does for you.",
    "parameters": ["int* array", "int length"],
    "returning": "double average"
  },
  "array_integer_frequency":
  {
    "description": "If you want to know the frequency  of  any  integer  in\nyour array, you can get the  decimal  value  from  this\nfunction. By dividing the amount with the length.",
    "parameters": ["int* array", "int length", "int integer"],
    "returning": "double frequency"
  },
  "integer_array_median":
  {
    "description": "The median is the integer in the middle or the  average\nof the two integers in the middle  of  an  array.  This\nfunction calculates that for your integer array.",
    "parameters": ["int* array", "int length"],
    "returning": "double median"
  },
  "integer_array_typical":
  {
    "description": "The typical value is what integer is most frequent in a\nset of integers, in this case an  array.  Put  in  your\narray and an integer, and it will give you the typical.",
    "parameters": ["int* array", "int length"],
    "returning": "int typical"
  },
  "array_integers_sequences":
  {
    "description": "This function calculates the product  of  all  integers\ninside an array. This is helpful when you want to  know\nhow many combinations there are from some integers.",
    "parameters": ["int* array", "int length"],
    "returning": "int sequences"
  },
  "array_integer_percent":
  {
    "description": "To calculate the percent an integer is taking up in  an\narray, you calculate the frequency and converts that to\npercent. It is what this function does anyways.",
    "parameters": ["int* array", "int length", "int integer"],
    "returning": "double percent"
  },
  "binary_and_operation":
  {
    "description": "There are many  operations  with  binary  values,  this\nfunction  performs  an  and-operation  on  two   binary\nstrings. The operation is one sort logic gate.",
    "parameters": ["char* first", "char* second", "int length"],
    "returning": "char* binary"
  },
  "binary_left_shifting":
  {
    "description": "The left-shifting binary operation shifts the  bits  to\nthe left. The one bit that was furthest to the left  is\ngoing to appear in the most right position.",
    "parameters": ["char* binary", "int length"],
    "returning": "char* shifted"
  },
  "binary_or_operation":
  {
    "description": "This binary operation checks the  bits  of  two  binary\nstrings, and activate the bit on the new binary  string\nif one or both bits are positive.",
    "parameters": ["char* first", "char* second", "int length"],
    "returning": "char* binary"
  },
  "binary_right_shifting":
  {
    "description": "When you right-shift a binary string, all the bits  are\ngoing to be shifted by one index to the  right.  Except\nfor the most right bit, it will be to the left.",
    "parameters": ["char* binary", "int length"],
    "returning": "char* shifted"
  },
  "binary_xor_operation":
  {
    "description": "Xor is a binary operation that works the  same  way  as\nthe or-operation, but it activates the bit in  the  new\nbinary, if the bits in the binary strings are the same.",
    "parameters": ["char* first", "char* second", "int length"],
    "returning": "char* binary"
  },
  "binary_not_operation":
  {
    "description": "This binary operation is going to  invert  all  of  the\nbits in a binary string. If the bit is positive the new\nbinary bit will be negative, and wise versa.",
    "parameters": ["char* binary", "int length"],
    "returning": "char* opposite"
  },
  "greatest_common_table":
  {
    "description": "If you have two integers, a greater and a smaller  one.\nAnd you want to know the highest integer that  both  of\nyour integer is dividable by, you can use this.",
    "parameters": ["int greater", "int smaller"],
    "returning": "int table"
  },
  "integer_range_between":
  {
    "description": "You can use this if you have an integer, and  you  want\nto know if the integer is in between two integers. That\nthe integer range between two integers.",
    "parameters": ["int integer", "int minimum", "int maximum"],
    "returning": "int boolean"
  },
  "convert_decimal_percent":
  {
    "description": "Decimal values are great, but lets say you want to have\nit in  percent.  With  this  function  you  can  easily\nconvert your decimal value to percent.",
    "parameters": ["double decimal"],
    "returning": "double percent"
  },
  "increase_integer_variable":
  {
    "description": "This function is used only to make your  programs  look\nnicer and become  easier  to  read.  You  put  in  your\ninteger and the amount, and it returns the sum.",
    "parameters": ["int variable", "int integer"],
    "returning": "int variable"
  },
  "smallest_fraction_form":
  {
    "description": "If you want to have your fraction in the smallest  form\npossible, that the denominator is as low as it can  be.\nYou can convert the fraction in this function.",
    "parameters": ["int* fraction"],
    "returning": "int* fraction"
  },
  "integer_power_operation":
  {
    "description": "This function converts a potency to a  normal  integer.\nThat means you put in a base and an exponent,  and  the\nprogram will return the product.",
    "parameters": ["int base", "int exponent"],
    "returning": "int product"
  },
  "fraction_variable_smaller":
  {
    "description": "Lets say you have two fraction variables, and you  want\nto know if one is smaller than the other. This function\nis great for determine that for you.",
    "parameters": ["int* first", "int* second"],
    "returning": "int boolean"
  },
  "compare_integer_variables":
  {
    "description": "This function  is  only  used  to  make  programs  look\nbetter. The function takes in two integers  and  checks\nif the are the same, it compares them.",
    "parameters": ["int first", "int second"],
    "returning": "int boolean"
  },
  "generate_random_fraction":
  {
    "description": "A fraction  is  a  datatype  with  a  numerator  and  a\ndenominator. This function generates a  random  decimal\nvalue and then converts it to a fraction.",
    "parameters": ["double minimum", "double maximum"],
    "returning": "int* fraction"
  },
  "integer_variable_smaller":
  {
    "description": "If you want to know if one integer variable of yours is\nsmaller than another. You can put in the  variable  you\nwant to check first and then the other.",
    "parameters": ["int first", "int second"],
    "returning": "int boolean"
  },
  "least_common_denominator":
  {
    "description": "When you want to use fraction variables  for  math  and\ndifferent mathematical operations, you want to have the\nleast common denominator, here you go.",
    "parameters": ["int* first", "int* second"],
    "returning": "int denominator"
  },
  "integer_between_integers":
  {
    "description": "This function will calculate which integer  is  between\ntwo  integers  that  you  put  in.  It  does  that   by\ncalculating the average of the two integers.",
    "parameters": ["int first", "int second"],
    "returning": "double integer"
  },
  "convert_percent_decimal":
  {
    "description": "If you have a percent value and you want to have it  in\ndecimal. You can put in  your  percent  value  in  this\nfunction and it will convert it for you.",
    "parameters": ["double percent"],
    "returning": "double decimal"
  },
  "integer_variable_greater":
  {
    "description": "The function will take in two integers, the  first  one\nwill be the one that is going to be checked against the\nother. It checks if it is greater or not.",
    "parameters": ["int first", "int second"],
    "returning": "int boolean"
  },
  "fraction_variable_stdout":
  {
    "description": "To debug or just to be informed, this  function  prints\nout a fraction in the console. The  numerator  and  the\ndenominator will be separated by a slash.",
    "parameters": ["int* fraction"],
    "returning": "void"
  },
  "convert_decimal_fraction":
  {
    "description": "If you have a decimal value and want  to  see  what  it\nwould look like in fraction form. You can put  in  your\ndecimal and a fraction will be returned.",
    "parameters": ["double decimal"],
    "returning": "int* fraction"
  },
  "generate_fraction_variable":
  {
    "description": "To generate  a  fraction  variable,  you  must  have  a\nnumerator and a denominator. If you  put  in  those  in\nthis function, a two-slot array will come out.",
    "parameters": ["int numerator", "int denominator"],
    "returning": "int* fraction"
  },
  "convert_fraction_decimal":
  {
    "description": "To convert a fraction variable to a decimal  value,  is\nsuper easy. The only thing you have to do, is to divide\nthe numerator with the denominator.",
    "parameters": ["int* fraction"],
    "returning": "double decimal"
  },
  "check_integer_divisible":
  {
    "description": "Sometimes it is good to know if an integer is divisible\nby some other integer. Like when you want to see if the\ninputted integer is even or not.",
    "parameters": ["int first", "int second"],
    "returning": "int boolean"
  },
  "convert_percent_fraction":
  {
    "description": "When you want to convert a percent value to a fraction,\nyou can convert the percent to a decimal value and then\nconvert the decimal value to a fraction.",
    "parameters": ["double percent"],
    "returning": "int* fraction"
  },
  "decimal_variable_smaller":
  {
    "description": "Like with the integers, this  function  checks  if  the\nfirst decimal in the parameters  is  smaller  then  the\nother decimal value in the parameters.",
    "parameters": ["double first", "double second"],
    "returning": "int boolean"
  },
  "compare_fraction_variables":
  {
    "description": "To check if two fraction variables is the same, you can\ncompare them in this function.  The  function  converts\nthe two fractions to decimal and then compares them.",
    "parameters": ["int* first", "int* second"],
    "returning": "int boolean"
  },
  "fraction_variable_denominator":
  {
    "description": "To access the denominator in a  fraction  variable  you\ntake the second integer inside the array.  Or  you  can\njust pass the fraction as an argument to this function.",
    "parameters": ["int* fraction"],
    "returning": "int denominator"
  },
  "inverted_fraction_variable":
  {
    "description": "An inverted version of a fraction can be used  in  many\ncases. Like when you want to get a one  by  multiplying\nthe fraction with its inverted value.",
    "parameters": ["int* fraction"],
    "returning": "int* inverted"
  },
  "generate_integer_products":
  {
    "description": "Every integer has a multiplication table, it  is  every\nproduct with the integer as one o f the  factors.  This\nfunction returns amount of products of the integer.",
    "parameters": ["int integer", "int amount"],
    "returning": "int* products"
  },
  "extend_fraction_variable":
  {
    "description": "This  function  makes  the  nominator  and  denominator\ngreater, but does not change the value. If you  convert\nthe fractions to decimal, they will be the same.",
    "parameters": ["int* fraction", "int integer"],
    "returning": "int* fraction"
  },
  "convert_fraction_percent":
  {
    "description": "To convert a fraction variable to decimal,  you  divide\nthe  nominator  with  the  denominator.  Then  you  can\nmultiple it by a hundred to get a percent value.",
    "parameters": ["int* fraction"],
    "returning": "double percent"
  },
  "fraction_variable_numerator":
  {
    "description": "To get the numerator from the fraction variable you can\naccess the first integer in the  array.  You  can  also\njust call this function to do it for you.",
    "parameters": ["int* fraction"],
    "returning": "int numerator"
  },
  "generate_random_integer":
  {
    "description": "Sometimes you want an integer,  but  can't  figure  out\nwhich one, so you generate a  random  integer.  Give  a\nminimum and maximum value, and it will give an integer.",
    "parameters": ["int minimum", "int maximum"],
    "returning": "int integer"
  },
  "shorten_fraction_variable":
  {
    "description": "You can extend and  shorten  fraction  variables.  With\nthis function you can  shorten  one  by  inputting  the\nfraction and the integer you want to shorten it by.",
    "parameters": ["int* fraction", "int integer"],
    "returning": "int* fraction"
  },
  "compare_decimal_variables":
  {
    "description": "This function takes in two decimal variables and checks\nif they are the same, it compares them. If they are the\nsame, the function will return positive.",
    "parameters": ["double first", "double second"],
    "returning": "int boolean"
  },
  "decimal_variable_greater":
  {
    "description": "If you want to check if a decimal variable  is  greater\nthen another, you can pass the  variable  you  want  to\ncheck first and then the variable to check against.",
    "parameters": ["double first", "double second"],
    "returning": "int boolean"
  },
  "fraction_variable_greater":
  {
    "description": "This function checks if the first parameter is  greater\nthen the other. If you want to check if  your  fraction\nis greater than another, use this function.",
    "parameters": ["int* first", "int* second"],
    "returning": "int boolean"
  },
  "duplicate_fraction_variable":
  {
    "description": "If you want to  have  multiple  of  the  same  fraction\nvariable,  you  should  duplicate  it.  If  you   don't\nduplicate it, both variables will be as one.",
    "parameters": ["int* fraction"],
    "returning": "int* doublet"
  },
  "generate_random_decimal":
  {
    "description": "You can  generate  a  lot  of  random  variables,  this\nfunction generates a random decimal value. The  decimal\nvalue will be between the minimum and maximum value.",
    "parameters": ["double minimum", "double maximum"],
    "returning": "double decimal"
  },
  "start_stopwatch_operation":
  {
    "description": "This function is used to  start  a  stopwatch  in  your\nprogram. It is used to measure time differences of  any\noperation or some other action.",
    "parameters": ["void"],
    "returning": "long time"
  },
  "stop_stopwatch_operation":
  {
    "description": "To stop a stopwatch after you have started it with  the\nother stopwatch function, you will call this  function.\nIt will return the time between starting and stopping.",
    "parameters": ["long start_time"],
    "returning": "int difference"
  },
  "seconds_delay_operation":
  {
    "description": "To have your program wait for a couple of second can be\nuseful in many cases, like in animation. This  function\nlets you stop your program for a specific time.",
    "parameters": ["int seconds"],
    "returning": "void"
  },
  "calculate_current_time":
  {
    "description": "The computer is always counting, this number  increases\nthe whole time the computer is on. This can be used  as\ntime. You can get the current time from this function.",
    "parameters": ["void"],
    "returning": "long time"
  },
  "generate_string_sentence":
  {
    "description": "A sentence is a list of strings. The amount of  strings\nis the height of the sentence, and the  length  of  the\nstrings are the width of the sentence.",
    "parameters": ["int height", "int width"],
    "returning": "char** sentence"
  },
  "sentence_index_string":
  {
    "description": "You can get the string at a slot  in  the  sentence  by\nusing an index. By putting  in  your  sentence  and  an\nindex, the function will return the character string.",
    "parameters": ["char** sentence", "index"],
    "returning": "char* string"
  },
  "compare_string_sentence":
  {
    "description": "When this function compares two sentences, it  compares\nevery string in both sentences, and  returns  false  if\ntwo of the strings doesn't match each other.",
    "parameters": ["char** first", "char** second", "int height", "int width"],
    "returning": "int boolean"
  },
  "allocate_sentence_character":
  {
    "description": "To allocate a character  to  a  sentence,  you  need  a\nheight and a width. With those  you  can  allocate  the\ncharacter like in a backwards coordinate system.",
    "parameters": ["char** sentence", "int height", "int width", "char character"],
    "returning": "char** sentence"
  },
  "allocate_sentence_string":
  {
    "description": "Allocating  a  string  to  a  sentence  is  just   like\nallocating an integer to an array.  With an  index  you\ncan determine where the string will be.",
    "parameters": ["char** sentence", "int index", "char* string"],
    "returning": "char** sentence"
  },
  "string_sentence_height":
  {
    "description": "The height of a sentence is determined by the amount of\nfull strings in the beginning. Therefore  you  have  to\ninput the total width to get the height.",
    "parameters": ["char** sentence", "int width"],
    "returning": "int height"
  },
  "reverse_sentence_strings":
  {
    "description": "With the help of a function that reverses the order  of\nthe characters inside a  string.  This  function  loops\nthrough all the strings and mirror them.",
    "parameters": ["char** sentence", "int height"],
    "returning": "char** sentence"
  },
  "delete_sentence_character":
  {
    "description": "Just like allocating a character  to  a  sentence,  you\nneed a height and width to delete a  character  in  the\nsentence. The characters after will take its place.",
    "parameters": ["char** sentence", "int height", "int width"],
    "returning": "char** sentence"
  },
  "delete_sentence_string":
  {
    "description": "By inputting the  index  of  the  string  you  want  to\ndelete, this function will delete the string  and  fill\nits place with the strings that came after it.",
    "parameters": ["char** sentence", "int height", "int index"],
    "returning": "char** sentence"
  },
  "string_sentence_stdout":
  {
    "description": "This function prints out a sentence  in  your  console.\nThe characters in the sentence will be  separated  like\nthey wore coordinates in a coordinate system.",
    "parameters": ["char** sentence", "int height", "int width"],
    "returning": "void"
  },
  "generate_random_sentence":
  {
    "description": "A random string can be generating by generating  length\namount of random characters. A random sentence  can  be\nmake by generating height amount of those strings.",
    "parameters": ["int height", "int width", "int minimum", "int maximum"],
    "returning": "char** sentence"
  },
  "duplicate_string_sentence":
  {
    "description": "If you want more than one of the same sentence, you can\nuse this function to duplicate it. By  duplicating  it,\nthe two sentences will be different stored.",
    "parameters": ["char** sentence", "int height", "int width"],
    "returning": "char** doublet"
  },
  "remove_sentence_characters":
  {
    "description": "This function removes every character that matches  the\ninputted  character  from  the  string  sentence.   The\ncharacter you put in will disappear from the sentence.",
    "parameters": ["char** sentence", "int height", "char character"],
    "returning": "char** sentence"
  },
  "add_sentence_character":
  {
    "description": "When you add a character to  a  sentence,  it  will  be\nstored at the end of the 'filled' sentence.  You  don't\nhave to know which height and width it will be at.",
    "parameters": ["char** sentence", "int height", "char character"],
    "returning": "char** sentence"
  },
  "remove_sentence_string":
  {
    "description": "A sentence is made by multiple strings in a  list.  You\ncan remove one of the strings using this  function.  It\nwill remove the last of the inputted string.",
    "parameters": ["char** sentence", "int height", "char* string"],
    "returning": "char** sentence"
  },
  "sentence_string_length":
  {
    "description": "If you want to know the length of one of the strings in\na sentence, you can use this function. It is useful  to\nknow when you want the width of a sentence.",
    "parameters": ["char** sentence", "int index"],
    "returning": "int length"
  },
  "add_sentence_string":
  {
    "description": "This function adds a string to the  inputted  sentence.\nJust like adding an integer to an array. This  function\nplaces the string at the end of the sentence.",
    "parameters": ["char** sentence", "int height", "char* string"],
    "returning": "char** sentence"
  },
  "sentence_string_contains":
  {
    "description": "When you want to check if one of the  strings  in  your\nsentence contains a specific  character,  you  can  use\nthis function. It returns true if it is in the string.",
    "parameters": ["char** sentence", "int index", "char character"],
    "returning": "int boolean"
  },
  "remove_sentence_character":
  {
    "description": "When you delete a character from a sentence, you need a\nheight  and  a  width.  Not  when  you   are   removing\nsomething, then it removes the last from the sentence.",
    "parameters": ["char** sentence", "int height", "char character"],
    "returning": "char** sentence"
  },
  "string_sentence_character":
  {
    "description": "By  inputting  a  height  and  a  width,  you  get  the\ncharacter at that position. It works like  a  backwards\ncoordinate system, first the height and then the width.",
    "parameters": ["char** sentence", "int height", "int width"],
    "returning": "char character"
  },
  "sort_sentence_strings":
  {
    "description": "With the help of a  function  that  sorts  a  character\nstring, this function sorts all strings in a  sentence.\nThe sort algorithm is called bubble sort.",
    "parameters": ["char** sentence", "int height"],
    "returning": "char** sentence"
  },
  "shuffle_sentence_strings":
  {
    "description": "This  function  shuffles  all  of  the  strings  in  an\ninputted sentence. If you aren't happy of how  shuffled\nthe strings are, you can call the function again.",
    "parameters": ["char** sentence", "int height"],
    "returning": "char** sentence"
  },
  "compare_sentence_content":
  {
    "description": "When you want to compare two sentences,  but  does  not\ncare about if the order of the strings in the sentences\nare different. You can use this function.",
    "parameters": ["char** first", "char** second", "int height", "int width"],
    "returning": "int boolean"
  },
  "sort_string_sentence":
  {
    "description": "This function sorts a string sentence by comparing  the\ncharacters in adjacent strings. This is used to compare\ntwo sentences, when only caring about the content.",
    "parameters": ["char** sentence", "int height"],
    "returning": "char** sentence"
  },
  "shuffle_string_sentence":
  {
    "description": "When you shuffle a string sentence, you randomly switch\nstrings here and there. So the order of the strings  in\nthe sentence becomes random.",
    "parameters": ["char** sentence", "int height"],
    "returning": "char** sentence"
  },
  "reverse_string_sentence":
  {
    "description": "This function reverses the order of the strings  inside\nthe sentence. It creates a new sentence  and  adds  the\nstrings from the inputted sentence backwards.",
    "parameters": ["char** sentence", "int height", "int width"],
    "returning": "char** reverse"
  },
  "sentence_string_index":
  {
    "description": "If you have a string from a sentence, and you  want  to\nknow which index the string  has.  You  can  call  this\nfunction and it will return the index of the string.",
    "parameters": ["char** sentence", "int height", "char* string"],
    "returning": "int index"
  },
  "combine_integer_arrays":
  {
    "description": "If you have two integer arrays, and you want to  create\nan array with all the integers together,  you  can  use\nthis function. It combines two integer arrays.",
    "parameters": ["int* first", "int* second"],
    "returning": "int* combined"
  },
  "combine_character_strings":
  {
    "description": "This function returns a string with characters from two\ninputted strings. If you want to combine two  character\nstrings, this function will be a great option.",
    "parameters": ["char* first", "char* second"],
    "returning": "char* combined"
  },
  "increase_array_memory":
  {
    "description": "If you have an integer array, and you want to  increase\nits memory, you  can  use  this  function.  It  can  be\nhelpful if you want to add more integers.",
    "parameters": ["int* array", "int length", "int increase"],
    "returning": "int* increased"
  },
  "increase_string_memory":
  {
    "description": "This function increases the size of a string, that  can\nbe used when you want to add more characters  than  you\nfirst thought. You will input the increase.",
    "parameters": ["char* string", "int length", "int increase"],
    "returning": "char* increased"
  },
  "compare_pair_variables":
  {
    "description": "If you want to compare two pair variables against  each\nother,  this  function  might  help.  It  compares  the\nintegers from both pairs against each other.",
    "parameters": ["int* first", "int* second"],
    "returning": "int boolean"
  },
  "comapre_coordinate_variables":
  {
    "description": "A coordinate has a width and a  height,  that  together\nmarks a position in a field. If you want to compare two\ncoordinates, you can use this function.",
    "parameters": ["int* first", "int* second"],
    "returning": "int boolean"
  },
  "coordinate_variable_height":
  {
    "description": "If  you  want  to  know  what  height  your  coordinate\nvariable has, you can use this  function.  It  returns\nthe height property of an inputted coordinate.",
    "parameters": ["int* coordinate"],
    "returning": "int height"
  },
  "coordinate_variable_width":
  {
    "description": "To get the width property  of  a  coordinate,  you  can\naccess the first integer in the  array.  You  can  also\nuse this function, it returns the coordinate-width.",
    "parameters": ["int* coordinate"],
    "returning": "int width"
  },
  "generate_coordinate_variable":
  {
    "description": "If you want to generate a coordinate variable, you  can\nuse this function. It generates an integer array of two\nintegers, first a width and then a height.",
    "parameters": ["int width", "int height"],
    "returning": "int* coordinate"
  },
  "generate_random_pair":
  {
    "description": "When you generate a random  pair,  you  are  generating\ntwo integers between a minimum  and  a  maximum  value.\nThis function generates a random pair using that.",
    "parameters": ["int minimum", "int maximum"],
    "returning": "int* pair"
  },
  "generate_random_coordinate":
  {
    "description": "To generate a random coordinate, you need  the  maximum\nwidth and height the coordinate could be. Then you  use\nthe width and the height to generate the coordinate.",
    "parameters": ["int width", "int height"],
    "returning": "int* coordinate"
  },
  "coordinate_variable_stdout":
  {
    "description": "This function prints out the inputted coordinate in the\nconsole. The first integer the function prints  out  is\nthe width, then comes the height.",
    "parameters": ["int* coordinate"],
    "returning": "void"
  }
}
